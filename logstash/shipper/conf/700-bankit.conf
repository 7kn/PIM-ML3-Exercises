# ----------------------------------------------------------------------------------------------------------------------------------------------
# FILE INFORMATION
# ----------------------------------------------------------------------------------------------------------------------------------------------
# Filename    : 700-bankit.conf
# Package     : Base configuration for application variables
# Owner       : Bank-IT DevOps team
# Application : BankIT 
# ----------------------------------------------------------------------------------------------------------------------------------------------
#
# Sample configuration for mandatory fields for the corporate ELK solution
# Logentries without these fields are marked as incompliant
#
# log_domain => Should be the log owner toplevel organisation (MANDATORY)
# log_type => Should be the log source (MANDATORY)
# log_component => Should be the technical component (i.e. application like bankit) which is delivering the message (MANDATORY)
# log_environment => Should be the correct environment label, in format 'd' for development, 't' for test, 'a' for acceptance or 'p' for prod (OPTIONAL)
#
# ----------------------------------------------------------------------------------------------------------------------------------------------
# VERSION HISTORY
# ----------------------------------------------------------------------------------------------------------------------------------------------

# ----------------------------------------------------------------------------------------------------------------------------------------------
# Version       Date            Name            Description
# ----------------------------------------------------------------------------------------------------------------------------------------------
# 01.00         20-05-2014      AvW             Initial release
# 01.01         23-02-2016      AvW             Added fixes and changes for PIM-ML3-Exercises
#
# ----------------------------------------------------------------------------------------------------------------------------------------------
#                                                       <<<<<< CODING STARTS HERE >>>>>>

filter {
	
	if [type] == "application" and [message] =~ /NAWModule/ {
   		drop { }
	}
	
	if [type] == "catalina" {
		grok {
			match => [ "message", "%{MONTHDAY:tmp_mday}-%{MONTH:tmp_month}-%{YEAR:tmp_year} %{TIME:tmp_time} %{LOGLEVEL:appl_loglevel} \[%{DATA:appl_module}\] %{DATA:appl_class} %{GREEDYDATA:appl_message}" ]
		}
		
		mutate {
			add_field => { "timestamp" => "%{tmp_mday}-%{tmp_month}-%{tmp_year} %{tmp_time}" }
			remove_field => [ "tmp_mday","tmp_month","tmp_year","tmp_time" ]
		}

		date {
    			match => [ "timestamp", "dd-MMM-yyyy HH:mm:ss.SSS" ]
    			remove_field => [ "timestamp" ]
  		}
		
	}
	
	if [type] == "application" {
                grok {
                        match => [ "message", "%{MONTHDAY:tmp_mday}-%{MONTH:tmp_month}-%{YEAR:tmp_year} %{TIME:tmp_time} %{LOGLEVEL:appl_loglevel} \[%{DATA:appl_module}\] %{DATA:appl_class} %{GREEDYDATA:appl_message}" ]
                }
		
		if [appl_module] =~ /HouseKeepingModule/ {
			mutate {
				add_field => { "appl_context" => "Technical" }
			}
		}

		if [appl_module] =~ /RegistrationModule/ {
                        mutate {
                                add_field => { "appl_context" => "Functional" }
                        }
                }
	
                mutate {
                        add_field => { "timestamp" => "%{tmp_mday}-%{tmp_month}-%{tmp_year} %{tmp_time}" }
                        remove_field => [ "tmp_mday","tmp_month","tmp_year","tmp_time" ]
                }

                date {
                        match => [ "timestamp", "dd-MMM-yyyy HH:mm:ss.SSS" ]
                        remove_field => [ "timestamp" ]
                }
	}
			
	if [type] == "performance" {
		kv {
			field_split => "|"
			add_field => { "performance_timestamp" => "%{key}" }
			add_field => { "performance_value" => "%{value}" }
			add_field => { "appl_module" => "%{module}" }
		}
		
		mutate {
			convert => [ "performance_value", "integer" ]
			remove_field => [ "key" ]
			remove_field => [ "value" ]
			remove_field => [ "module" ]
			add_field => { "timestamp" => "%{performance_timestamp}" }
  		}
		
		date {
			 match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
			 remove_field => [ "timestamp" ]
		}

	}

        mutate {
                add_field => { "log_domain" => "cio" }
                add_field => { "log_type" => "tcserver" }
                add_field => { "log_component" => "bankit" }
                add_field => { "log_environment" => "p" }
        }
	
	if "_grokparsefailure" in [tags] {
    		prune {
			add_field => { "appl_datamask" => "applied" }
      			blacklist_names => [ "message", "appl_message" ]
    		}
  	}

}
